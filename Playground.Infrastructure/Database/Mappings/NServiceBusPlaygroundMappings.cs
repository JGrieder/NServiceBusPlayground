

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "Playground.Infrastructure\App.config"
//     Connection String Name: "NServiceBusPlaygroundDbContext"
//     Connection String:      "Data Source=.\LOCALDEVELOPER; Initial Catalog=NServiceBusPlayground; User Id=NServiceBusMaster; password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Playground.Infrastructure.Database.Mappings
{
    using Entities;


    // ************************************************************************
    // POCO Configuration

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.20.2.0")]
    public class AccountMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountMap()
            : this("NServiceBusPlayground")
        {
        }

        public AccountMap(string schema)
        {
            ToTable(schema + ".Account");
            HasKey(x => x.AccountId);

            Property(x => x.AccountId).HasColumnName(@"AccountId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DisplayName).HasColumnName(@"DisplayName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Email).HasColumnName(@"Email").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
        }
    }

    // ApplicationRegistry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.20.2.0")]
    public class ApplicationRegistryMap : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ApplicationRegistry>
    {
        public ApplicationRegistryMap()
            : this("NServiceBusPlayground")
        {
        }

        public ApplicationRegistryMap(string schema)
        {
            ToTable(schema + ".ApplicationRegistry");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ApplicationKey).HasColumnName(@"ApplicationKey").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsOptional().HasColumnType("date");
            Property(x => x.Description).HasColumnName(@"Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ApplicationType).HasColumnName(@"ApplicationType").IsRequired().HasColumnType("tinyint");
            Property(x => x.AccountId).HasColumnName(@"AccountId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Account).WithMany(b => b.ApplicationRegistries).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK__Applicati__Accou__35BCFE0A
        }
    }

}
// </auto-generated>

